// Code generated by MockGen. DO NOT EDIT.
// Source: province.go
//
// Generated by this command:
//
//	mockgen -source=province.go -destination=mock/province.go -package=mock
//
// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	domain "github.com/bagashiz/gommerce/internal/app/province/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockProvinceRepository is a mock of ProvinceRepository interface.
type MockProvinceRepository struct {
	ctrl     *gomock.Controller
	recorder *MockProvinceRepositoryMockRecorder
}

// MockProvinceRepositoryMockRecorder is the mock recorder for MockProvinceRepository.
type MockProvinceRepositoryMockRecorder struct {
	mock *MockProvinceRepository
}

// NewMockProvinceRepository creates a new mock instance.
func NewMockProvinceRepository(ctrl *gomock.Controller) *MockProvinceRepository {
	mock := &MockProvinceRepository{ctrl: ctrl}
	mock.recorder = &MockProvinceRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProvinceRepository) EXPECT() *MockProvinceRepositoryMockRecorder {
	return m.recorder
}

// GetAll mocks base method.
func (m *MockProvinceRepository) GetAll() ([]domain.Province, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]domain.Province)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockProvinceRepositoryMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockProvinceRepository)(nil).GetAll))
}

// GetByID mocks base method.
func (m *MockProvinceRepository) GetByID(id string) (*domain.Province, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id)
	ret0, _ := ret[0].(*domain.Province)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockProvinceRepositoryMockRecorder) GetByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockProvinceRepository)(nil).GetByID), id)
}

// MockProvinceUsecase is a mock of ProvinceUsecase interface.
type MockProvinceUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockProvinceUsecaseMockRecorder
}

// MockProvinceUsecaseMockRecorder is the mock recorder for MockProvinceUsecase.
type MockProvinceUsecaseMockRecorder struct {
	mock *MockProvinceUsecase
}

// NewMockProvinceUsecase creates a new mock instance.
func NewMockProvinceUsecase(ctrl *gomock.Controller) *MockProvinceUsecase {
	mock := &MockProvinceUsecase{ctrl: ctrl}
	mock.recorder = &MockProvinceUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProvinceUsecase) EXPECT() *MockProvinceUsecaseMockRecorder {
	return m.recorder
}

// GetAll mocks base method.
func (m *MockProvinceUsecase) GetAll() ([]domain.Province, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]domain.Province)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockProvinceUsecaseMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockProvinceUsecase)(nil).GetAll))
}

// GetByID mocks base method.
func (m *MockProvinceUsecase) GetByID(id string) (*domain.Province, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id)
	ret0, _ := ret[0].(*domain.Province)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockProvinceUsecaseMockRecorder) GetByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockProvinceUsecase)(nil).GetByID), id)
}

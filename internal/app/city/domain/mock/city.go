// Code generated by MockGen. DO NOT EDIT.
// Source: city.go
//
// Generated by this command:
//
//	mockgen -source=city.go -destination=mock/city.go -package=mock
//
// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	domain "github.com/bagashiz/gommerce/internal/app/city/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockCityRepository is a mock of CityRepository interface.
type MockCityRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCityRepositoryMockRecorder
}

// MockCityRepositoryMockRecorder is the mock recorder for MockCityRepository.
type MockCityRepositoryMockRecorder struct {
	mock *MockCityRepository
}

// NewMockCityRepository creates a new mock instance.
func NewMockCityRepository(ctrl *gomock.Controller) *MockCityRepository {
	mock := &MockCityRepository{ctrl: ctrl}
	mock.recorder = &MockCityRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCityRepository) EXPECT() *MockCityRepositoryMockRecorder {
	return m.recorder
}

// GetAll mocks base method.
func (m *MockCityRepository) GetAll(provinceID string) ([]domain.City, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", provinceID)
	ret0, _ := ret[0].([]domain.City)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockCityRepositoryMockRecorder) GetAll(provinceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockCityRepository)(nil).GetAll), provinceID)
}

// GetByID mocks base method.
func (m *MockCityRepository) GetByID(id string) (*domain.City, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id)
	ret0, _ := ret[0].(*domain.City)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockCityRepositoryMockRecorder) GetByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockCityRepository)(nil).GetByID), id)
}

// MockCityUsecase is a mock of CityUsecase interface.
type MockCityUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockCityUsecaseMockRecorder
}

// MockCityUsecaseMockRecorder is the mock recorder for MockCityUsecase.
type MockCityUsecaseMockRecorder struct {
	mock *MockCityUsecase
}

// NewMockCityUsecase creates a new mock instance.
func NewMockCityUsecase(ctrl *gomock.Controller) *MockCityUsecase {
	mock := &MockCityUsecase{ctrl: ctrl}
	mock.recorder = &MockCityUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCityUsecase) EXPECT() *MockCityUsecaseMockRecorder {
	return m.recorder
}

// GetAll mocks base method.
func (m *MockCityUsecase) GetAll(provinceID string) ([]domain.City, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", provinceID)
	ret0, _ := ret[0].([]domain.City)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockCityUsecaseMockRecorder) GetAll(provinceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockCityUsecase)(nil).GetAll), provinceID)
}

// GetByID mocks base method.
func (m *MockCityUsecase) GetByID(provinceID, cityID string) (*domain.City, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", provinceID, cityID)
	ret0, _ := ret[0].(*domain.City)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockCityUsecaseMockRecorder) GetByID(provinceID, cityID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockCityUsecase)(nil).GetByID), provinceID, cityID)
}
